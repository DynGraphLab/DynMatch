#include "glossary.h"

std::string glossary::algorithms = std::string(
"List of dynamic algorithms, which are supposed to be used. The following \n" 
"                                                     algorithms are available: \n"
"          bgs                                        randomized algorithm by Baswana, Gupta and Sen, \n"
"                                                     computes 2-approximate maximum matching.\n"
"\n"
"          naive                                      deterministic greedy algorithm, computes 2-approximate \n"
"                                                     maximum matching.\n"
"\n"
"          ns                                         deterministic algorithm by Neiman and Solomon, computes \n"
"                                                     3/2-approximate maximum matching.\n"
"\n"
"          rw:<eps>:<rws>                             Random Walk. randomized algorithm, which performs random \n"
"                                                     walks on edge deletion in order to obtain high matching \n"
"                                                     quality. maximal random walk length is 1/eps. has no \n"
"                                                     approximation guarantee.\n"
"\n"
"          mrw:<eps>:<rws>                            Maximal matching Random Walk. randomized algorithm, \n"
"                                                     which performs random walks on edge deletion in order \n"
"                                                     to obtain high matching quality. maximal random walk \n"
"                                                     length is 1/eps. computes 2-approximate maximum matching.\n"
"\n"
"          sq-m-rw:<eps>:<rws>                        Sqrt(M)-Random Walk. randomized algorithm, which performs \n"
"                                                     random walks on edge deletion in order to obtain high \n"
"                                                     matching quality. maximal random walk length is sqrt(m), \n"
"                                                     where m is the number of edges present in the graph. \n"
"                                                     computes 2-approximate maximum matching.\n"
"\n"
"          lds:<eps>:<rws>                            Low Degree Settle. randomized algorithm, which performs \n"
"                                                     random walks on edge deletion and further tries to settle \n"
"                                                     vertices with low degree naively. maximal random walk \n"
"                                                     length is 1/eps. computes 2-approximate maximum matching.\n"
"\n"
"          en:<eps>:<rws>                             Extended Naive. randomized algorithm, which is basically \n"
"                                                     the naive algorithm with additional random walks. maximal \n"
"                                                     random walk length is 1/eps. computes 2-approximate \n" 
"                                                     maximum matching \n"
"\n"
"          ei-naive                                   Extended Insertion Naive. deterministic algorithm, which \n"
"                                                     as an improvement to the naive algorithm does search for \n"
"                                                     augmenting paths of length 3 during edge insertion. \n"
"                                                     computes a 3/2-approximate maximum matching \n"
"\n"
"                                                     For example, in order to compute dynamic matchings using \n"
"                                                     Neiman, Solomon and the maximal matching random walk \n"
"                                                     algorithm with 1/eps=10, call the program with \n"
"                                                     --algorithms=[ns, mrw 0.1] \n"
"                                                     "
"\n"
);

std::string glossary::output_format = std::string (
"Pass output format as array with up to 7 entries in square brackets, where entries are one of the following: \n"
"          cd                                         cumulated degree of matched vertices \n"
"          av                                         number of vertices with degree more than 1 \n"
"          E                                          number of edges present in the graph \n"
"          M                                          number of edges present in the matching \n"
"          aM                                         average number of edges present in the matching. averaged \n"
"                                                     throughout experiment repetitions \n"
"          ut                                         update time taken for <step> sequence steps \n"
"          cs                                         matching similarity across experiment repetitions \n"
"                                                     \n"
"                                                     If not specified, only the average matching size aM is \n"
"                                                     printed. This corresponds to \n"
"                                                     --output-format=[aM] \n"
"                                                     "
);
